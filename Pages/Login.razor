@page "/login"
@using System.ComponentModel.DataAnnotations
@inject DisasterReliefFrontEnd.Services.AuthService AuthService
@inject NavigationManager Navigation

<div class="row justify-content-center mt-5">
    <div class="col-md-6 col-lg-5">
        <div class="card shadow-sm border-danger">
            <div class="card-header bg-danger text-white text-center">
                <h3>Login</h3>
            </div>
            <div class="card-body">
                <EditForm Model="@loginModel" OnValidSubmit="LoginUser">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <InputText class="form-control" @bind-Value="loginModel.Email" />
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <InputText class="form-control" type="password" @bind-Value="loginModel.Password" />
                    </div>

                    <button class="btn btn-danger w-100" type="submit" disabled="@isLoading">
                     "login"
                    </button>

                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert alert-info mt-3" role="alert">@message</div>
                    }
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool isLoading = false;
    private string message = string.Empty;

    private async Task LoginUser()
    {
        message = string.Empty;

        if (string.IsNullOrWhiteSpace(loginModel.Email) || string.IsNullOrWhiteSpace(loginModel.Password))
        {
            message = "Please enter both email and password.";
            return;
        }

        try
        {
            isLoading = true;
            bool success = await AuthService.LoginAsync(loginModel.Email, loginModel.Password);
            if (success)
            {
                message = "Login successful!";
                Navigation.NavigateTo("/disaster-help");
            }
            else
            {
                message = "Invalid credentials.";
            }
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; } = string.Empty;
    }
}
